{"ast":null,"code":"export const CategorizeIngredient = (ingredients = []) => {\n  if (!Array.isArray(ingredients)) {\n    console.error(\"Expected ingredients to be an array, but got:\", ingredients);\n    return {}; // Return an empty object if ingredients is not an array\n  }\n  return ingredients.reduce((acc, ingredient) => {\n    // Assuming each ingredient has a category property with a name\n    const {\n      category\n    } = ingredient;\n\n    // Ensure category is defined\n    if (category && category.name) {\n      if (!acc[category.name]) {\n        acc[category.name] = []; // Initialize array if category does not exist\n      }\n      acc[category.name].push(ingredient); // Add ingredient to the appropriate category\n    } else {\n      console.warn(\"Ingredient has no valid category:\", ingredient);\n    }\n    return acc; // Return the accumulator for the next iteration\n  }, {});\n};\n_c = CategorizeIngredient;\nvar _c;\n$RefreshReg$(_c, \"CategorizeIngredient\");","map":{"version":3,"names":["CategorizeIngredient","ingredients","Array","isArray","console","error","reduce","acc","ingredient","category","name","push","warn","_c","$RefreshReg$"],"sources":["C:/Users/gangw/OneDrive/Desktop/online-frontend/src/commponent/utils/CategorizeIngredient.js"],"sourcesContent":["export const CategorizeIngredient = (ingredients = []) => {\r\n  if (!Array.isArray(ingredients)) {\r\n    console.error(\"Expected ingredients to be an array, but got:\", ingredients);\r\n    return {}; // Return an empty object if ingredients is not an array\r\n  }\r\n\r\n  return ingredients.reduce((acc, ingredient) => {\r\n    // Assuming each ingredient has a category property with a name\r\n    const { category } = ingredient;\r\n\r\n    // Ensure category is defined\r\n    if (category && category.name) {\r\n      if (!acc[category.name]) {\r\n        acc[category.name] = []; // Initialize array if category does not exist\r\n      }\r\n      acc[category.name].push(ingredient); // Add ingredient to the appropriate category\r\n    } else {\r\n      console.warn(\"Ingredient has no valid category:\", ingredient);\r\n    }\r\n\r\n    return acc; // Return the accumulator for the next iteration\r\n  }, {});\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,oBAAoB,GAAGA,CAACC,WAAW,GAAG,EAAE,KAAK;EACxD,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,WAAW,CAAC,EAAE;IAC/BG,OAAO,CAACC,KAAK,CAAC,+CAA+C,EAAEJ,WAAW,CAAC;IAC3E,OAAO,CAAC,CAAC,CAAC,CAAC;EACb;EAEA,OAAOA,WAAW,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEC,UAAU,KAAK;IAC7C;IACA,MAAM;MAAEC;IAAS,CAAC,GAAGD,UAAU;;IAE/B;IACA,IAAIC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE;MAC7B,IAAI,CAACH,GAAG,CAACE,QAAQ,CAACC,IAAI,CAAC,EAAE;QACvBH,GAAG,CAACE,QAAQ,CAACC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC;MAC3B;MACAH,GAAG,CAACE,QAAQ,CAACC,IAAI,CAAC,CAACC,IAAI,CAACH,UAAU,CAAC,CAAC,CAAC;IACvC,CAAC,MAAM;MACLJ,OAAO,CAACQ,IAAI,CAAC,mCAAmC,EAAEJ,UAAU,CAAC;IAC/D;IAEA,OAAOD,GAAG,CAAC,CAAC;EACd,CAAC,EAAE,CAAC,CAAC,CAAC;AACR,CAAC;AAACM,EAAA,GAtBWb,oBAAoB;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}